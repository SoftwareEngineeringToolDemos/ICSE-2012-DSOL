package org.dsol.planner.impl;

import graphplan.Graphplan;
import graphplan.domain.DomainDescription;
import graphplan.domain.Operator;
import graphplan.domain.Proposition;
import graphplan.domain.jason.OperatorImpl;
import graphplan.domain.jason.PropositionImpl;
import graphplan.flyweight.OperatorFactory;
import graphplan.flyweight.OperatorFactoryException;
import graphplan.graph.PlanningGraphException;
import graphplan.parser.ParseException;
import graphplan.parser.PlannerParser;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import org.dsol.planner.api.AbstractAction;
import org.dsol.planner.api.Fact;
import org.dsol.planner.api.GenericAbstractAction;
import org.dsol.planner.api.Goal;
import org.dsol.planner.api.PlanResult;
import org.dsol.planner.api.Planner;
import org.dsol.planner.api.State;
import org.dsol.planner.api.util.ProblemParserUtil;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

/**
 * Default implementation of DSOL planner.
 */
public class DefaultPlanner implements Planner {


	private Logger logger = Logger.getLogger(DefaultPlanner.class.getName());
	
	private DomainDescription domain;
	private List<Goal> goals;
	
	private int currentGoal = 0;
	Goal currentGoalState;
	
	/**
	 * Constructor used only for testing purposes
	 * @throws ParseException 
	 * @throws IOException 
	 */
	public DefaultPlanner() throws IOException, ParseException {}

	@Override
	public void initialize(InputStream actions, InputStream initialState, InputStream goal) throws Exception{
		OperatorFactory.getInstance(true);
		
		PlannerParser parser = new PlannerParser();
		InputStream uniqueGoal = createUniqueGoal(goal);
		domain = parser.parseProblem(actions, createUniqueStream(initialState, uniqueGoal));
		
	}

	
	// parse to remove the multiple goals and keep them
	protected InputStream createUniqueGoal(InputStream goals)
			throws IOException {

		this.goals = ProblemParserUtil.parseGoals(goals);
		StringBuilder newProblem = new StringBuilder();
		newProblem.append(this.goals.get(0).toString());
		
		return new ByteArrayInputStream(newProblem.toString().getBytes());

	}
	
	public PlanResult plan(){
		setGoal(currentGoal);
		
		Graphplan graphplan = new Graphplan();
		try {
			graphplan.PlanResult planResult = graphplan.plan(domain);
			if(planResult != null && planResult.isTrue()){

				List<Fact> initialState = Util.getPropositionsAsFacts(domain.getInitialState());
				State currentState = new StateImpl(initialState);

				PlanResult dsolPlanResult = new PlanResult(initialState,currentGoalState);
				for (Operator operator : planResult) {
		
					dsolPlanResult.addStep(new AbstractActionImpl(operator));
					currentState.apply(Util.getPropositionsAsFacts(operator.getEffects()));
					dsolPlanResult.addState(currentState.clone());
				}
				return dsolPlanResult;
			}
		} catch (PlanningGraphException e) {
			e.printStackTrace();
		} catch (OperatorFactoryException e) {
			e.printStackTrace();
		}
		
		return new PlanResult();
	}
		
	public void setGoal(int index) {
		currentGoal = index;
		Goal newGoal = goals.get(index);
		List<Proposition> currentGoalState = domain.getGoalState();
		currentGoalState.clear();
		for(Fact fact:newGoal){
			currentGoalState.add(new PropositionImpl(fact.get()));	
		}
		
		this.currentGoalState = newGoal; 
	}
	
	public boolean tryNextGoal() {
		currentGoal++;
		return currentGoal < goals.size();
	}

	public void removeOperation(AbstractAction action) {
		OperatorFactory operatorFactory = OperatorFactory.getInstance();
		if(action instanceof AbstractActionImpl){
			operatorFactory.addInvalidOperatorInstantiation(((AbstractActionImpl) action).getOperator().toString());	
		}
		else{
			operatorFactory.addInvalidOperatorInstantiation(action.toString());
		}
		
	}

	@Override
	public void addToInitialState(List<Fact> newFacts) {
		List<Proposition> initialState = domain.getInitialState();
		List<Proposition> newInitialState = new ArrayList<Proposition>();
		newInitialState.addAll(initialState);
		for(Fact fact:newFacts){
			newInitialState.add(new PropositionImpl(fact.get()));	
		}
		initialState.clear();
		initialState.addAll(newInitialState);
	}

	@Override
	public void setGoal(Goal goal) {
		goals.clear();
		goals.add(goal);
		currentGoal = 0;
	}


	@Override
	public JsonObject toJSON() {
		Gson gson = new Gson();
		JsonObject planner = new JsonObject();

		JsonArray operators = new JsonArray();
		for(Operator operator:domain.getOperators()){
			JsonObject operatorJSON = new JsonObject();
			operatorJSON.addProperty("name", operator.getFunctor());
			operatorJSON.addProperty("seam", operator.isSeam());
			operatorJSON.addProperty("enabled", operator.isEnabled());
			
			List<String> params = new ArrayList<String>();
			for(Object param:operator.getTerms()){
				params.add(param.toString());
			}
			operatorJSON.add("params", gson.toJsonTree(params));
			
			List<String> preconds = new ArrayList<String>();
			for(Proposition precond:operator.getPreconds()){
				preconds.add(precond.toString());
			}
			operatorJSON.add("pre", gson.toJsonTree(preconds));

			List<String> postconds = new ArrayList<String>();
			for(Proposition postcond:operator.getEffects()){
				postconds.add(postcond.toString());
			}
			operatorJSON.add("post", gson.toJsonTree(postconds));
			operators.add(operatorJSON);
		}

		planner.add("actions", operators);

		return planner;
	}

	@Override
	public void update(Planner plannerToBeUPdated) {
		DefaultPlanner dsolPlanner = (DefaultPlanner)plannerToBeUPdated;
		List<Operator> operators = dsolPlanner.domain.getOperators();
		operators.clear();
		for(Operator operator : domain.getOperators()){
			operators.add(operator);
		}
	}

	@Override
	public void updateActions(List<GenericAbstractAction> newAbstractActions) {
		List<Operator> operators = domain.getOperators();
		operators.clear();
		OperatorFactory operatorFactory = OperatorFactory.getInstance(true);
		for(GenericAbstractAction abstractAction:newAbstractActions){
			StringBuilder signature = new StringBuilder(abstractAction.getName());
			List<String> params = abstractAction.getParams();
			if(!params.isEmpty()){
				signature.append("(");
				for(int i = 0;i<params.size();i++){
					if(i != 0){
						signature.append(",");		
					}
					signature.append(params.get(i));
				}
				signature.append(")");
			}
			OperatorImpl op = (OperatorImpl) operatorFactory.createOperatorTemplate(signature.toString(), abstractAction.getPre().toArray(new String[]{}), abstractAction.getPost().toArray(new String[]{}));
			op.setSeam(abstractAction.isSeam());
			if(!abstractAction.isEnabled()){
				op.disable();
			}
			operators.add(op);
		}
	}

	@Override
	public List<AbstractAction> getAbstractActions() {
		List<Operator> operators = domain.getOperators();
		List<AbstractAction> actions = new ArrayList<AbstractAction>();
		
		for(Operator operator:operators){
			actions.add(new AbstractActionImpl(operator));
		}
		
		return actions;
	}

	@Override
	public void disableAction(String action) {
		List<Operator> operators = domain.getOperators();
		
		for(Operator operator:operators){
			if(operator.getFunctor().equals(action)){
				operator.disable();
			}
		}		
	}

	@Override
	public void loadActions(InputStream actions) {
		PlannerParser plannerParser = new PlannerParser();
		try {
			domain.setOperators(plannerParser.parseOperators(actions));
		} catch (ParseException e) {
			throw new RuntimeException(e.getMessage());
		}
	}

	@Override
	public void setInitialStateAndGoal(InputStream initialState, InputStream goal) {

		try {
			
			PlannerParser plannerParser = new PlannerParser();
			DomainDescription domain = plannerParser.parseDomain(createUniqueStream(initialState, goal));
			
			this.domain.getInitialState().clear();
			this.domain.getGoalState().clear();
			for(Proposition fact:domain.getInitialState()){
				this.domain.getInitialState().add(fact);
			}

			Goal goalList = new Goal();
			for(Proposition fact:domain.getGoalState()){
				this.domain.getGoalState().add(fact);
				goalList.add(new Fact(fact.toString()));
			}
			setGoal(goalList);
			
		} catch (Exception e) {
			throw new RuntimeException(e.getMessage());
		}	
	}
	
	private InputStream createUniqueStream(InputStream initialState, InputStream goal) throws IOException{
		ByteArrayOutputStream problem = new ByteArrayOutputStream();
		byte[] bytes = new byte[10240];
		int bytesRead = 0;
		
		while((bytesRead=initialState.read(bytes)) != -1){
			problem.write(bytes,0,bytesRead);
		}
		problem.write("\n".getBytes());
		
		while((bytesRead=goal.read(bytes)) != -1){
			problem.write(bytes,0,bytesRead);
		}
		return new ByteArrayInputStream(problem.toByteArray());
	}

}