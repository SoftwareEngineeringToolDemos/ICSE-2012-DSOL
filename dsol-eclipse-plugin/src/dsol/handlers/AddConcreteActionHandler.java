package dsol.handlers;

import java.io.StringWriter;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.jdt.core.IBuffer;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jdt.ui.IWorkingCopyManager;
import org.eclipse.jdt.ui.JavaUI;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.text.ITextSelection;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.ISelectionProvider;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.handlers.HandlerUtil;
import org.eclipse.ui.texteditor.ITextEditor;

import dsol.wizard.AddConcreteAction;

/**
 * Our sample handler extends AbstractHandler, an IHandler base class.
 * 
 * @see org.eclipse.core.commands.IHandler
 * @see org.eclipse.core.commands.AbstractHandler
 */
public class AddConcreteActionHandler extends AbstractHandler {
	/**
	 * The constructor.
	 */
	public AddConcreteActionHandler() {
	}

	/**
	 * the command has been executed, so extract extract the needed information
	 * from the application context.
	 */
	public Object execute(ExecutionEvent event) throws ExecutionException {

		
		IWorkbenchWindow window = HandlerUtil.getActiveWorkbenchWindowChecked(event);
		try {
			
			Shell shell = window.getShell();
			
			AddConcreteAction wizard = new AddConcreteAction();

			WizardDialog dialog = new WizardDialog(shell, wizard);
			int result = dialog.open();
			if(result == WizardDialog.CANCEL){
				return null;
			}
			StringWriter method = new StringWriter();
			
			String abstractAction = wizard.getAbstractActionName();
			method.append("@Action(name=\"").append(abstractAction).append("\"");
			
			String service = wizard.getService();
			boolean isServiceAction = !service.isEmpty();
			if(isServiceAction){
				method.append(",service=\"").append(service).append("\"");
			}
			
			method.append(")").append("\n");
			String returnValue = wizard.getReturnValue();
			if(!returnValue.isEmpty()){
				method.append("\t@ReturnValue(\"").append(returnValue).append("\")\n");
			}
			method.append("\tpublic ");
			if(isServiceAction){
				method.append("abstract ");
			}
			
			method.append(wizard.getReturnType()).append(" ");
			method.append(wizard.getMethodName());
			method.append("(");
			method.append(wizard.getParameters());
			method.append(")");
			if(isServiceAction){
				method.append(";");
			}
			else{
				method.append("{\n\t\t//TODO:Write concrete action code. Auto-generated by DSOL plug-in.\n\t}");
			}
			method.append("\n");
			
			IEditorInput editorInput = HandlerUtil.getActiveEditorInput(event);
			

			IWorkingCopyManager manager = JavaUI.getWorkingCopyManager();
			
			ICompilationUnit workingCopy = manager.getWorkingCopy(editorInput);
			
			IEditorPart editor =  PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();

			int offset = -1;
			if (editor instanceof ITextEditor) {
			  ISelectionProvider selectionProvider = ((ITextEditor)editor).getSelectionProvider();
			  ISelection selection = selectionProvider.getSelection();
			  if (selection instanceof ITextSelection) {
			    ITextSelection textSelection = (ITextSelection)selection;
			    offset = textSelection.getOffset(); // etc.
			  }
			}
			
			IBuffer buffer = workingCopy.getBuffer();
			if(offset != -1){
				buffer.replace(offset, 0, method.toString());
			}
			else{
				buffer.append(method.toString());	
			}
			
			workingCopy.reconcile(ICompilationUnit.NO_AST, false, null, null);		

		} catch (JavaModelException e) {
			MessageDialog.openError(window.getShell(), "Error", e.getMessage());
		}
		return null;
	}
}
